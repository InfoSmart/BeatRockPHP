/** * InfoSmart JavaScript Kernel. * * Archivo de procesamiento para JavaScipt con jQuery * recomendado para todas las aplicaciones de InfoSmart. * * InfoSmart. Todos los derechos reservados. * Copyright 2011 - Iván Bravo Bravo. * http://www.infosmart.mx/ - http://www.jquery.com/**/var Kernel = {	_page: {		title: '',		hash: '',		name: ''	},	_anim: {		title: '',		times: '',		total: ''	},		_allow: {		html: false,		audio: false,		video: false,		file: false,		geo: false,		notify: false,		dnd: false,		socket: false	},		_pos: {		latitude: '',		longitude: '',		accuracy: ''	},		_callFrom: {		'infosmart.mx': true,		'localhost': true	},		_callAction: {		'example': function() { alert('Example'); },		'close.alert': function() { InfoAlerts.close(); },		'reload.p.sec': function() { window.location.reload(); }	},		_lastCall: null,		_protocol: 'http://',	_socket: null,	_mActive: false,		Allow: function(t)	{		if(t == "html5")			return Kernel._allow.html;		if(t == "audio")			return Kernel._allow.audio;		if(t == "video")			return Kernel._allow.video;		if(t == "file")			return Kernel._allow.file;		if(t == "geo")			return Kernel._allow.geo;		if(t == "notify")			return Kernel._allow.notify;		if(t == "dnd")			return Kernel._allow.dnd;		if(t == "socket")			return Kernel._allow.socket;					return false;	},		VerifyPerms: function()	{		if(!!(document.createElement("canvas").getContext('2d')))				Kernel._allow.html = true;					if(!!(document.createElement('audio').canPlayType('audio/mpeg')))			Kernel._allow.audio = true;						if(!!(document.createElement('video').canPlayType('video/mp4')))			Kernel._allow.video = true;						if(window.File && window.FileReader && window.FileList && window.Blob)			Kernel._allow.file = true;						if(navigator.geolocation)			Kernel._allow.geo = true;						if(window.webkitNotifications)			Kernel._allow.notify = true;						//if(Modernizr.draganddrop)			//Kernel._allow.dnd = true;						if(window.WebSocket)			Kernel._allow.socket = true;	},		GetGeo : function(successCallback, errorCallback)	{			if(this.Allow("geo"))			navigator.geolocation.getCurrentPosition(successCallback, errorCallback);	},		SetPath : function(title, path)	{		if(title == undefined || title == "")			title = this._page.title;					document.title = title;		window.history.replaceState(null, "", path);	},		AnimateTitle : function(title)	{		if(this._anim.times <= this._anim.total)		{			if(document.title == this._page.title)				document.title = title;			else				document.title = this._page.title;					this._anim.times += 1;				this._anim.title = true;						setTimeout('Kernel.AnimateTitle("' + title + '")', 1500);		}		else		{			this._anim.times = 0;			this._anim.title = false;						document.title = this._page.title;					}	},		SetTitle : function(title, animation, total)	{				if(this.IsNumeric(total))			this._anim.total = total;					if(title != "")		{			if(animation == true)			{				if(this._anim.title == false)					this.AnimateTitle(title);			}			else				document.title = title;		}	},		CleanText : function(str)	{		if(str == "")			return str;					str = str.replace(/<([^<]+)>([^<]+)<\/([^<]+)>/gi, "$2");					return str;	},		IsNumeric : function(str)	{		str = parseFloat(str);				if((str - 0) == str)			return true;		else			return false;	},		Trim : function(str)	{		try		{ return str.replace(/^\s+/g,'').replace(/\s+$/g,''); }		catch(e)		{ return str; }	},		Print_R : function(arr, level)	{		var dumped_text = "";				if(!level) 			level = 0;					var level_padding = "";				for(var j=0; j < level + 1; j++)			level_padding += "    ";			if(typeof(arr) == 'object') 		{			for(var item in arr) 			{				var value = arr[item];							if(typeof(value) == 'object') 				{					dumped_text += level_padding + "'" + item + "' ...\n";					dumped_text += this.Print_R(value,level+1);				} 				else					dumped_text += level_padding + "'" + item + "' => \"" + value + "\"\n";			}		}		else			dumped_text = "===>"+arr+"<===("+typeof(arr)+")";					return dumped_text;	},		Json_decode: function(str_json)	{		var json = window.JSON;				if (typeof json === 'object' && typeof json.parse === 'function') 		{						try 			{				return json.parse(str_json);			} 			catch (err) 			{				return null;			}		}	 		var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;		var j;		var text = str_json;		cx.lastIndex = 0;				if (cx.test(text)) 		{			text = text.replace(cx, function (a) {				return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);			});		}	 		if ((/^[\],:{}\s]*$/).		test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').		replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').		replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) 		{			j = eval('(' + text + ')');	 			return j;		}	 		return null;	},		Json_encode: function(str_json)	{		var retVal, json = window.JSON;				try 		{			if (typeof json === 'object' && typeof json.stringify === 'function') 			{				retVal = json.stringify(str_json); 				if (retVal === undefined)					this.Clog("Ha sucedido un error al codificar '" + str_json + "' a JSON.", "error");									return retVal;			}	 			var value = str_json;	 			var quote = function (string) 			{				var escapable = /[\\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;								var meta = {					'\b': '\\b',					'\t': '\\t',					'\n': '\\n',					'\f': '\\f',					'\r': '\\r',					'"': '\\"',					'\\': '\\\\'				};	 				escapable.lastIndex = 0;								return escapable.test(string) ? '"' + string.replace(escapable, function (a) {					var c = meta[a];					return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);				}) + '"' : '"' + string + '"';			};	 			var str = function (key, holder) 			{				var gap = '';				var indent = '    ';				var i = 0; // The loop counter.				var k = ''; // The member key.				var v = ''; // The member value.				var length = 0;				var mind = gap;				var partial = [];				var value = holder[key];	 				// If the value has a toJSON method, call it to obtain a replacement value.				if (value && typeof value === 'object' && typeof value.toJSON === 'function') {					value = value.toJSON(key);				}	 				// What happens next depends on the value's type.				switch (typeof value) {				case 'string':					return quote(value);	 				case 'number':					// JSON numbers must be finite. Encode non-finite numbers as null.					return isFinite(value) ? String(value) : 'null';	 				case 'boolean':				case 'null':					// If the value is a boolean or null, convert it to a string. Note:					// typeof null does not produce 'null'. The case is included here in					// the remote chance that this gets fixed someday.					return String(value);	 				case 'object':					// If the type is 'object', we might be dealing with an object or an array or					// null.					// Due to a specification blunder in ECMAScript, typeof null is 'object',					// so watch out for that case.					if (!value) {						return 'null';					}					if ((this.PHPJS_Resource && value instanceof this.PHPJS_Resource) || (window.PHPJS_Resource && value instanceof window.PHPJS_Resource)) {						throw new SyntaxError('json_encode');					}	 					// Make an array to hold the partial results of stringifying this object value.					gap += indent;					partial = [];	 					// Is the value an array?					if (Object.prototype.toString.apply(value) === '[object Array]') {						// The value is an array. Stringify every element. Use null as a placeholder						// for non-JSON values.						length = value.length;						for (i = 0; i < length; i += 1) {							partial[i] = str(i, value) || 'null';						}	 						// Join all of the elements together, separated with commas, and wrap them in						// brackets.						v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']';						gap = mind;						return v;					}	 					// Iterate through all of the keys in the object.					for (k in value) {						if (Object.hasOwnProperty.call(value, k)) {							v = str(k, value);							if (v) {								partial.push(quote(k) + (gap ? ': ' : ':') + v);							}						}					}	 					// Join all of the member texts together, separated with commas,					// and wrap them in braces.					v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}';					gap = mind;					return v;				case 'undefined':					// Fall-through				case 'function':					// Fall-through				default:					throw new SyntaxError('json_encode');				}			};	 			// Make a fake root object containing our value under the key of ''.			// Return the result of stringifying the value.			return str('', {				'': value			});	 		} catch (err) { // Todo: ensure error handling above throws a SyntaxError in all cases where it could			// (i.e., when the JSON global is not available and there is an error)			if (!(err instanceof SyntaxError)) {				throw new Error('Unexpected error type in json_encode()');			}			this.php_js = this.php_js || {};			this.php_js.last_error_json = 4; // usable by json_last_error()			return null;		}	},		SetCookie : function(name, value, days)	{		if(days) 		{			var date = new Date();			date.setTime(date.getTime()+(days*24*60*60*1000));			var expires = "; expires="+date.toGMTString();		}		else 			var expires = "";				document.cookie = name + "=" + value + expires + "; path=/";	},		GetCookie : function(name)	{		var nameEQ = name + "=";		var ca = document.cookie.split(';');				for(var i=0;i < ca.length;i++) 		{			var c = ca[i];						while (c.charAt(0)==' ')				c = c.substring(1,c.length);							if (c.indexOf(nameEQ) == 0)				return c.substring(nameEQ.length,c.length);		}				return null;	},		DeleteCookie : function(name)	{		this.SetCookie(name, "", -1);	},		SetData : function(param, value)	{		try		{ window.localStorage.setItem(param, value); }		catch (e)		{ }	},		GetData : function(param)	{		try		{ return window.localStorage.getItem(param); }		catch (e)		{ }	},		DeleteData : function(param)	{		try		{ window.localStorage.removeItem(param); }		catch(e)		{ }	},		ShowBox : function(a, t)	{		$(".box-" + a).fadeIn("slow");				if(t > 1000)			setTimeout(function() { $(".box-" + a).fadeOut("slow"); }, t);	},		ReadPhoto : function(p, c)	{		if(!this.Allow("file"))		{			alert("Lo sentimos, pero la imagen no se ha subido debido a que el navegador web no soporta esta función, actualiza tu navegador web y vuelve a intentarlo.");			return;		}		var photo = p.target.files[0];					if(photo.type !== "image/png" && photo.type !== "image/jpg" && photo.type !== "image/jpeg" && photo.type !== "image/gif")			alert('El formato de esta imagen no es válida.');		else		{			var File = new FileReader();						File.onerror = function() {				alert("Lo sentimos, pero ha ocurrido un error al intentar subir esta imagen.");			};							File.onload = function(e) {				$(c).attr("src", e.target.result);			};							File.readAsDataURL(photo);		}	},		ReturnPhoto : function(p, c)	{		if(!this.Allow("file"))		{			alert("Lo sentimos, pero la imagen no se ha subido debido a que el navegador web no soporta esta función, actualiza tu navegador web y vuelve a intentarlo.");			return;		}				var photo = p.target.files[0];					if(photo.type !== "image/png" && photo.type !== "image/jpg" && photo.type !== "image/jpeg" && photo.type !== "image/gif")			alert('El formato de esta imagen no es válida.');		else		{			var File = new FileReader();							File.onerror = function() {				alert("Lo sentimos, pero ha ocurrido un error al intentar subir esta imagen.");			};							File.onload = function(e) {				c(e.target.result);			};							File.readAsDataURL(photo);		}	},		GetPhoto : function(p, c)	{		if(!this.Allow("file"))		{			alert("Lo sentimos, pero la imagen no se ha subido debido a que el navegador web no soporta esta función, actualiza tu navegador web y vuelve a intentarlo.");			return;		}				var result = {};		var photo = p.target.files[0];					result = photo;					if(photo.type !== "image/png" && photo.type !== "image/jpg" && photo.type !== "image/jpeg" && photo.type !== "image/gif")			alert('El formato de esta imagen no es válida.');		else		{			var File = new FileReader();							File.onerror = function() {				alert("Lo sentimos, pero ha ocurrido un error al intentar subir esta imagen.");			};							File.onload = function(e) {				result.src = e.target.result;				c(result);			};							File.readAsDataURL(photo);		}	},		GetBrowser : function(user_agent)	{		if(user_agent == "" || user_agent == undefined)			user_agent = navigator.appName + " " + navigator.appVersion;				if(user_agent.indexOf('Opera Mini') != -1)			return "Opera Mini";		else if(user_agent.indexOf('Opera Mobile') != -1)			return "Opera Mobile";		else if(user_agent.indexOf('Mobile') != -1)			return "Mobile";		else			return "Desconocido";	},		GetOS : function(user_agent)	{		if(user_agent == "" || user_agent == undefined)			user_agent = navigator.appName + " " + navigator.appVersion;					if(user_agent.indexOf('Android') != -1)			return "Android";		else if(user_agent.indexOf('iPhone') != -1)			return "iPhone";		else if(user_agent.indexOf('iPod') != -1)			return "iPod";		else			return "Desconocido";	},	TimeDate : function(time, hour)	{		if(!this.IsNumeric(time))			return "";					var result = "";				try {			var date = new Date(time * 1000);			result = date.getDay() + "-" + date.getMonth() + "-" + date.getFullYear();						if(hour == true)				result += " " + date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();						} catch(e) { }					return result;	},		DateTime : function(date)	{		var result = "";				try {			var d = new Date(date);			result = d.getTime() / 1000.0;		} catch(e) { }				return result;	},		CalculateTime : function(dat)	{		var inte = ["segundo", "minuto", "hora", "día", "semana", "mes", "año"];		var dur = [60, 60, 24, 7, 4.35, 12];				time = parseInt(time);		var now = parseInt(this.UnixTime());		var j = 0;				var dif = 0;		var str = "";				var sh = time + 10;				if(now == time || now < sh)			return "Justo ahora";		else if(now > time)		{			dif = now - time;			str = "Hace";		}		else		{			dif = time - now;			str = "Dentro de";		}				for(j = 0; dif >= dur[j] && j < dur.length - 1; j++)			dif /= dur[j];					dif = Math.round(dif);				if(dif != 1)		{			inte[5] += "e";			inte[j] += "s";		}				return str + " " + dif + " " + inte[j];	},		UnixTime: function() 	{		return Math.round((new Date()).getTime() / 1000);	},		FilterHash: function()	{		return document.location.hash.substring(2);		},		HaveStyle: function(s)	{		if(document.querySelector("link[href='" + s + "']") == null)			return false;		else			return true;	},		AddStyle: function(s)	{		if(this.HaveStyle(s))			return;					try		{			var css = document.createElement('link');			css.href = s;			css.rel = 'stylesheet';			document.querySelector("head").appendChild(css);		}		catch(e) { }	},		HaveScript: function(s)	{		if(document.querySelector("script[src='" + s + "']") == null)			return false;		else			return true;	},		AddScript: function(s)	{		if(this.HaveScript(s))			return;					try		{			var js = document.createElement('script');			js.src = s;			document.querySelector("head").appendChild(js);		}		catch(e) { }	},		UrlEncode: function(u)	{		try		{			return encodeURIComponent(u).replace(/!/g, '%21').replace(/'/g, '%27').replace(/\(/g, '%28').replace(/\)/g, '%29').replace(/\*/g, '%2A');		}		catch(e) { return u; }	},		StrPos: function(h, n, o)	{		try		{			var i = (h + '').indexOf(n, (o || 0));			return i === -1 ? false : i;		}		catch(e) { return false; }	}	};$(document).ready(function() {		// Incluyendo archivo JavaScript Base.	Kernel.AddScript(Resources_Sys + '/js/functions.base.js');		// Incluyendo archivo de Google Translate - Descomenta (Aquí y en functions.base.js) para agregar Google Translate a tus páginas.	//Kernel.AddScript('//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit');		// Ajustes iniciales.	Kernel._page.title = document.title;	Kernel._page.hash = Kernel.FilterHash();	Kernel._protocol = document.location.protocol + '//';		// Procesos iniciales.	Kernel.VerifyPerms();		// Llamadas seguras - Descomenta si conoces de Llamadas Cross-Site seguras.	//window.addEventListener("message", getMessage, false);});function getMessage(e){	if(Kernel.StrPos(e.origin, "localhost") == false)		return;		var c = Kernel._callAction[e.data.action];		if(c != undefined)	{		Kernel._lastCall = e;		c(e.data.result);			}}